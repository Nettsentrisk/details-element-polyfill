# Feature tests

support =
  element: do ->
    element = document.createElement("details")
    return false unless "open" of element

    element.innerHTML = "<summary>a</summary>b"
    element.setAttribute("style", "position: absolute; left: -9999px")

    parent = document.body ? document.documentElement
    parent.appendChild(element)
    closedHeight = element.offsetHeight
    element.open = true
    openedHeight = element.offsetHeight
    parent.removeChild(element)

    closedHeight isnt openedHeight

  toggleEvent: do ->
    element = document.createElement("details")
    "ontoggle" of element

return if support.element and support.toggleEvent

# Polyfill installers

polyfillStyles = ->
  document.head.insertAdjacentHTML("afterbegin", """<style><%= depend_on_asset("./polyfill.css").to_s.gsub(/\s/, "").strip %></style>""")

polyfillProperties = ->
  {prototype} = document.createElement("details").constructor
  {setAttribute, removeAttribute} = prototype
  open = Object.getOwnPropertyDescriptor(prototype, "open")

  Object.defineProperties prototype,
    open:
      get: ->
        if @tagName is "DETAILS"
          @hasAttribute("open")
        else
          open?.get?.call(this)
      set: (value) ->
        if @tagName is "DETAILS"
          if value
            @setAttribute("open", "")
          else
            @removeAttribute("open")
          value
        else
          open?.set?.call(this, value)

    setAttribute:
      value: (name, value) ->
        triggerToggleIfToggled this, =>
          setAttribute.call(this, name, value)

    removeAttribute:
      value: (name) ->
        triggerToggleIfToggled this, =>
          removeAttribute.call(this, name)

polyfillToggle = ->
  onTogglingTrigger (element) ->
    summary = element.querySelector("summary")
    if element.hasAttribute("open")
      element.removeAttribute("open")
      summary.setAttribute("aria-expanded", false)
    else
      element.setAttribute("open", "")
      summary.setAttribute("aria-expanded", true)

polyfillFocusAndARIA = ->
  for summary in findElementsWithTagName(document.documentElement, "SUMMARY")
    addAttributesForSummary(summary)

  if MutationObserver?
    observer = new MutationObserver (mutations) ->
      for {addedNodes} in mutations
        for target in addedNodes
          for summary in findElementsWithTagName(target, "SUMMARY")
            addAttributesForSummary(summary)

    observer.observe(document.documentElement, subtree: true, childList: true)
  else
    document.addEventListener "DOMNodeInserted", (event) ->
      for summary in findElementsWithTagName(event.target, "SUMMARY")
        addAttributesForSummary(summary)

addAttributesForSummary = (summary, details) ->
  details ?= findClosestElementWithTagName(summary, "DETAILS")
  summary.setAttribute("aria-expanded", details.hasAttribute("open"))
  summary.setAttribute("tabindex", "0") unless summary.hasAttribute("tabindex")
  summary.setAttribute("role", "button") unless summary.hasAttribute("role")

polyfillToggleEvent = ->
  if MutationObserver?
    observer = new MutationObserver (mutations) ->
      for {target, attributeName} in mutations
        if target.tagName is "DETAILS" and attributeName is "open"
          triggerToggle(target)

    observer.observe(document.documentElement, attributes: true, subtree: true)
  else
    onTogglingTrigger (element) ->
      open = element.getAttribute("open")
      setTimeout ->
        unless element.getAttribute("open") is open
          triggerToggle(element)
      , 1

# Event helpers

eventIsSignificant = (event) ->
  not (
    event.defaultPrevented or
    event.ctrlKey or
    event.metaKey or
    event.shiftKey or
    event.target.isContentEditable
  )

onTogglingTrigger = (callback) ->
  addEventListener "click", (event) ->
    if eventIsSignificant(event) and event.which <= 1
      if element = findClosestElementWithTagName(event.target, "SUMMARY")
        if element.parentElement?.tagName is "DETAILS"
          callback(element.parentElement)
  , false

  addEventListener "keydown", (event) ->
    if eventIsSignificant(event) and event.keyCode in [13, 32]
      if element = findClosestElementWithTagName(event.target, "SUMMARY")
        if element.parentElement?.tagName is "DETAILS"
          callback(element.parentElement)
          # Prevent pagedown from space key
          event.preventDefault()
  , false

findElementsWithTagName = (root, tagName) ->
  elements = []
  if root.nodeType is Node.ELEMENT_NODE
    elements.push(root) if root.tagName is tagName
    elements.push(root.getElementsByTagName(tagName)...)
  elements

findClosestElementWithTagName = do ->
  if typeof Element::closest is "function"
    (element, tagName) ->
      element.closest(tagName)
  else
    (element, tagName) ->
      while element
        if element.tagName is tagName
          return element
        else
          element = element.parentNode

triggerToggle = (element) ->
  event = document.createEvent("Events")
  event.initEvent("toggle", true, false)
  element.dispatchEvent(event)

triggerToggleIfToggled = (element, fn) ->
  open = element.getAttribute("open")
  result = fn()
  triggerToggle(element) unless element.getAttribute("open") is open
  result

# Install polyfills

unless support.element
  polyfillStyles()
  polyfillProperties()
  polyfillToggle()
  polyfillFocusAndARIA()

if support.element and not support.toggleEvent
  polyfillToggleEvent()
